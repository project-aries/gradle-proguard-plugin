allprojects {

    apply plugin: 'groovy'
    apply plugin: 'java-gradle-plugin'
    apply plugin: 'net.ltgt.errorprone'
    apply from: "$rootDir/gradle/artifacts.gradle"
    apply from: "$rootDir/gradle/jacoco.gradle"
    //apply from: "$rootDir/gradle/pmd.gradle"
    //apply from: "$rootDir/gradle/checkstyle.gradle"
    //apply from: "$rootDir/gradle/findbugs.gradle"
    apply from: "$rootDir/gradle/publishing.gradle"

    repositories {
        mavenLocal()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }        
        maven { 
            url artifactoryURL
            credentials {
                username = artifactoryUser
                password = artifactoryPassword
            }
        }
    }

    dependencies {
        errorprone 'com.google.errorprone:error_prone_core:2.0.21'
        compile localGroovy(), gradleApi()
        compile group: 'net.sf.proguard', name: 'proguard-base', version: '5.3.3'
        compile group: 'net.sf.proguard', name: 'proguard-gradle', version: '5.3.3'

        testCompile "junit:junit:4.12"
        testCompile ('org.assertj:assertj-core:3.8.0')
        testCompile('org.spockframework:spock-core:1.0-groovy-2.4') {
            exclude group: 'org.codehaus.groovy'
        }
    }

    sourceSets {
        functionalTest {
            groovy.srcDir file('src/functionalTest/groovy')
            resources.srcDir file('src/functionalTest/resources')
            compileClasspath += sourceSets.main.output + configurations.testRuntime
            runtimeClasspath += output + compileClasspath
        }
    }

    gradlePlugin {
        testSourceSets sourceSets.functionalTest
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs += ["-Xlint:-options"]
        sourceCompatibility = '1.8'
        targetCompatibility = '1.8'
    }
    
    tasks.withType (Test) {
        maxParallelForks = 2
        testLogging {
            showStandardStreams = true
            events 'started', 'passed', 'failed'
        }
        jacoco {
            append = false
            destinationFile = file("$buildDir/jacoco/${name}.exec")
            classDumpDir = file("$buildDir/jacoco/${name}_ClassDump")
        }
    }

    task functionalTest(type: Test) {
        description = 'Runs the functional tests.'
        group = 'verification'
        testClassesDirs = sourceSets.functionalTest.output.classesDirs
        classpath = sourceSets.functionalTest.runtimeClasspath
        mustRunAfter test

        reports {
            html.destination = project.file("$html.destination/functional")
            junitXml.destination = project.file("$junitXml.destination/functional")
        }
    }

    build.finalizedBy functionalTest, jacocoTestReport, jacocoTestCoverageVerification
}
